In this lecture we are going to configure JSON and Rest framework.

Simple JWT.

And first we're going to create a signing key for our JSON web token.

A JWT signing key is a secret cryptographic key that is used to sign a JWT.

To verify its authenticity.

We are going to be using the Python Secrets package again.

So go back to terminal.

Then we can say Python.

Uh, dash c import secrets.

Run that command.

We're going to get the secret key.

Then we're going to use this characters in the signing key environment variable that you're going to

create in the M local file.

So go back to envs then m dot local.

Then after cookie secure here we can create a signing underscore key.

Then go back to terminal.

Let's copy that then paste it in.

Then you can save that.

Then also add this key to the MPs dot example file.

So copy this key.

Go to Amazon example and paste it in and then add the quotation marks.

Then you save that file.

Then we shall create a custom user serializer that will be used in the creation of users by Josa.

Since we are using a custom user model so you can go to co underscore apps and then users.

Then again, create a new file.

This file is going to be called Serializers dot pi.

And so this file is in users.

And then uh serializers dot p y like that.

Then as usual we're going to start with our inputs.

So you can see from uh Django added contrib added auth.

We're going to import a get user model.

Then from a user uh dot.

Uh serializers.

We're going to import the user create serializer.

Then you can say user is a get user model.

And then we're going to create a class uh, which is going to be called uh create a user will create

user uh serializer.

It's going to subclass the user create serializer.

And then we're going to have a metaclass.

As you can see class meta.

And this is going to subclass the user create serializer dot meta.

Then the model to be used for this serializer is the user model.

Then the fields we unserialized are the id field we username.

Then the first name.

And then the last name.

And then the password.

And that's it for that serializer.

With the serializer done back in our config settings based on py file, we're going to configure Rest

framework JSON and simple JWT.

So let's go back to base and settings base.py.

Then uh before we start configuring it down here let's go to the top and we're going to have some imports.

So go to scroll to the top.

And we're going to say from a date time.

We are going to import time Delta.

That's the only input.

Then you can scroll to the bottom and then a fast.

We're going to handle the Django Rest framework configuration.

And so you can see Rest underscore framework like that.

It's going to be a dictionary.

Then the first key is going to be a default underscore authentication underscore classes.

We're going to be defining authentication classes.

And this is going to take the value of core underscore apps dot common dot.

Then remember in our common app we had created our custom authentication class which is this cookie

authentication.

That is going to be our default authentication class.

So we can say core underscore apps dot common dot cookie.

The folder is cookie underscore auth and the class is cookie authentication.

Let me just copy this.

That's it for that.

Then you add a comma and after this, uh, this point here also add a comma because it's a tuple.

And then we're going to have another key of default permission classes.

And this is going to have a value of our Rest framework.

The permissions.

A dot is authenticated.

Then a comma there and a comma there.

So by default for API, users must be authenticated.

So that's what you're setting there.

Then we're going to set another one for default pagination class.

So let me just copy this.

La-based.

Then this is going to be a default.

The pagination.

A class.

Mod classes.

The default pagination class like that.

And I'm going to say this is going to be a racist remark.

Dot a pagination.

Then we're going to be using page number pagination.

And then you see that, and then we're going to declare our filter backends so we can say here no it's

default underscore filter underscore backends.

And this is going to be a list.

And here we're going to be using our Django filter package.

So you can say Django underscore filters dot rest underscore framework.

Dirt, jungle and filter backend.

And just like that.

Then for our rest remark, we want to set a page size for pagination purposes.

As you can see here a page size.

The default pitch size is going to be ten.

And then we want to set up throttling.

And throttling is basically a way to limit the number of requests that can be made to the API.

And so we can say here a default.

Underscore or throttle class.

Actually, it's classes like that.

Sorry for that.

Then here we can see.

The rest underscore framework.

Dot a throttling.

Dot anon rate throttle just like that.

And so here this anon rate throttle is going to throttle users who are not authenticated with our API.

These are anonymous users.

And then after anon rate throttle we're going to have a Rest underscore framework.

And the throttling again at this time we're going to throttle or the authenticated user.

So this is user rate a throttle like that.

And so basically here we're going to throttle authenticated users to a given rate of requests across

the API.

We are now going to define the default throttle rates.

So we can say here the default underscore throttle underscore rate.

And this is going to be a for anonymous users, that is users who are not authenticated with our API.

The throttling is going to be set to a 200 requests per day, and feel free to change these values depending

on the application you're building.

And then for the authenticated users, it can be for our use case let's say 500 per day.

Then you can save the file.

And that's it for our Rest framework configuration.

So just make sure you get the spellings right.

Let me just countercheck mine.

It looks good, but this is not correct.

This is authenticated.

I missed an eye and so it's authenticated like this.

Then check the rest.

Check the rest.

I think they're good.

Now we're going to configure simple JWT.

As you can see here a simple underscore JWT.

Then the first key is going to be our signing key.

And we're going to get this from an environment variable.

So you can say get env.

And remember our environment variable is also called signing key.

Then we're going to declare our access token lifetime.

That is, how many minutes before our access tokens expire.

As you can see, access underscore token underscore lifetime.

And we're going to use the time delta input we had imported up above.

So time delta and you want to access tokens to expire after 30 minutes.

So you can say minutes is 30.

Uh, feel free to change this value depending on the application you're building.

Then the next one is going to be for the refresh token.

As you can see I refresh.

Whoa refresh underscore token underscore lifetime.

And this is going to be a time delta.

I refresh tokens are supposed to expire much longer than access tokens.

So for our application you can see our refresh tokens are going to expire after one day.

So you say days and you set that to one.

And then we can see here a rotate underscore refresh underscore tokens.

And we can set that to true.

And so here we can refresh tokens is set to true.

If I refresh token is submitted to the token refresh view a new refresh token will be returned along

with the new access token.

Then the next one is going to be the user ID.

So you can see here user underscore ID underscore field.

And ours is the ID field.

And so this user ID field is the database field from the user model that will be included in the generated

tokens to identify the users.

And so here we're going to be using our ID field.

And then the next one is going to be a user user underscore ID underscore claim.

And this is going to be the user underscore ID.

So this is the claim in generated tokens which will be used to store the user identifiers of for example

a setting a value of user underscore ID would mean generated tokens include a user underscore ID claim

that contains the user's identifier, and then you save that.

That's it for our simple JWT configuration.

And the next we're going to be configuring JSON.

So you can just see here just like that.

And for JSON I'm just going to be copying some of these things.

So you can go to the JSON documentation.

So first going to configure the user ID field.

That's what I can say.

I can just copy that.

I'll bring it in.

And so in quotation marks just say user ID field.

We're going to the value to ID just like we did up above here.

And this is the name of the field in the user model that is used as the unique identifier.

Then next we're just going to copy the login field.

So the login field for our application.

Is going to be email.

And this is basically the name of the field in the user model that is going to be used as the login

field.

If you go to the user documentation and this is the logging field we're talking about, then the next

one is going to be for the token model.

So if we just scroll down we're going to get this token model and just copy it.

And then paste it.

This token model appoints to which token model should be used for authentication.

In our case, since we're using stateless tokens, that is JWT tokens, we are going to set it to none.

Then the next one is going to be user create password type.

So you can just copy this here.

Where is it user create password type.

You just copy that, then go back, add it in.

Then the value of this is going to be true.

If this is set to true.

You're going to need to pass the re underscore password to the users endpoint to validate password equality.

Then the next one is going to be a send activation email.

So you can just copy that and send activation email.

Then you can set that to true.

If this is set to true, the user is going to be required to click an activation link as sent in the

email after creating an account or updating the email.

And then the next one is going to be a password change email confirmation.

So just copy paste it in here.

We set that to true.

Again.

If this is set to true we're changing password endpoints.

We'll send a confirmation email to the user.

Then the next one is going to be a password reset confirm retype.

So just copy it and paste it.

Against this to true again.

So basically, if this is true, you are going to need to pass the re underscore new underscore password

field to the user's reset endpoint to validate password equality.

Then the next turn you're going to get the activation URL.

And we're going to set this to activate.

Then pass in the a UID and the token just like that.

And so this is basically going to be the URL for our front end activation page.

And it should contain the UID and a token placeholders that you're going to populate when you get to

the front end part of our application.

And then the next one is password reset confirm URL and just copy it paste it in.

We're going to set this one to a password.

Hyphen reset.

And then we're going to pass in our UID.

And the token, and then the next one is for our social authentication.

We are going to bring in this one which is social authentication allowed redirect URIs, which is basically

a list of allowed redirect URIs for social authentication.

And you can't get this from our environment variables.

So you can say get env.

And we're going to call this redirect underscore URIs.

Then comma, then input, and then a quotation marks.

And then we're going to call the split method.

So dot split and I'm going to split it at the comma go.

We're going to split it at the comma because it's a list.

And then next we're going to define our serializer.

So you can see Serializers.

Whoa Serializers.

And here for JSON.

We're going to bring in our custom serializer that we had created.

So if you go to the JSON documentation under Serializers, it allows you to create your own Serializers

and then map them to this serializer dictionary.

And so that's what you're doing.

And this Serializers have particular keys that you have to use.

So for our case we're going to change the user create serializer which is right here user create.

So you can go back here and I'm going to say for the user underscore create key.

We're going to provide our custom serializer.

Our custom serializer is in core underscore apps dot users dot Serializers dot wait called it create

user and serializer.

Then you save that file.

Then we're going to configure social auth.

And in our case we're going to allow users to also authenticate using Google.

And so at the bottom here we can say uh uh social underscore auth underscore Google underscore auth

two and hyphen key.

And remember we're doing this outside JSON.

So make sure it's after this curly brace then this one.

Then for this key we're going to get it from our environment variables.

And we're going to call this Google underscore client underscore ID.

We're going to create this credentials when we set up our app on Google.

So don't worry about that.

Then the next one is going to be and let me copy social auth key paste it in.

So it's social underscore auth underscore Google auth two.

Now this is the secret.

And is going to be getenv.

And we're going to call this Google.

Underscore.

Client.

Underscore.

Secret.

And then the next one.

Let's just paste again its social auth underscore Google underscore oauth2.

Then this is now the scope.

Home.

This is going to be a list.

So here, when defining our scope, we want to define what values we want to get from Google.

And in our case, we just want to get the user's email and the user's profile and their OpenID.

So you can see here https double colon w w w dot Google api's dot com slash auth slash user info.

That email.

And then a Https.

It's just the same thing.

Let me just copy this again.

We paste it in.

Also it is auth then user info.

Now this time it is profile.

And then and lastly, it's open and it's just like that.

And then the next one is going to be just copy that.

Had he done.

So it's going to be social underscore auth underscore Google underscore auth.

Then this is going to change to extra data.

And which extra data do you want to get?

We want to get there a first name.

And the last underscore name.

So here in the scope we want the user's email and the profile.

And for the next data we want from Google you want the a first name and the last name.

And that's it for this configuration.

So please make sure you get the uh spellings correct.

Don't make mistakes like you have seen me doing before.

And you should be good to go.

And that's it for configuration.

Now we can go back to our terminal and build our containers.

Now that you've added new environment variables.

So go back to your terminal and you can run.

A social mixer and the root directory.

Then now you can run.

Make a build.

Good.

So go back to Docker Desktop and confirm that everything is okay.

As you can see, everything is green so we are good to go.

It means you've set up things correctly.

And with that done, we can go back to our git client and commit our code.

So go back to your git client here and you can see this is a chore.

Now let's say add a user a simple JWT.

And rest of framework settings.

And then you make the commit.

And that's it for this lecture.

In the next lecture we're going to be covering auth views.


