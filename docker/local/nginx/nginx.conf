# ======================================================================
# NGINX REVERSE PROXY CONFIGURATION FOR DJANGO REAL ESTATE PROJECT
# ======================================================================
# 
# PURPOSE:
# This nginx configuration serves as a reverse proxy that routes incoming
# HTTP requests to appropriate backend services in a Docker Compose setup:
# - Django API requests go to the 'api' container (Django + DRF)
# - Frontend requests go to the 'client' container (Next.js)
# - Static files are served directly by nginx for performance
#
# ARCHITECTURE:
# Internet → Nginx (port 80) → {Django API (port 8000), Next.js (port 3000)}
#
# KEY BENEFITS:
# - Single entry point for all traffic
# - Load balancing capability with upstream blocks
# - WebSocket support for Next.js hot reload
# - CORS handling for API documentation access      
# - Optimized static file serving with caching
# - Centralized logging and access control
# ======================================================================

# ======================================================================
# UPSTREAM DEFINITIONS - Backend Service Groups
# ======================================================================

# Django API Server Upstream
# Defines the backend Django application running on port 8000
# In Docker Compose, 'api' resolves to the django container service name
upstream api{
    server api:8000;
    # Future scalability: Add more servers here for load balancing
    # server api2:8000 weight=3;
    # server api3:8000 backup;
}

# WebSocket Connection Upgrade Mapping
# Required for Next.js hot reload and any WebSocket connections
# Maps HTTP Upgrade header to connection upgrade for WebSocket support
map $http_upgrade $connection_upgrade {
    default upgrade;    # If Upgrade header present, upgrade connection
    ''  close;         # If no Upgrade header, close normally
}

# Next.js Client Server Upstream  
# Defines the frontend Next.js application running on port 3000
# In Docker Compose, 'client' resolves to the next.js container service name
upstream client {
    server client:3000;
    # Future scalability: Add more Next.js instances for load balancing
}

# ======================================================================
# MAIN SERVER BLOCK - HTTP Traffic Handler
# ======================================================================

server{
    # Listen on port 80 for all HTTP traffic
    # This is the main entry point for the application
    listen 80;
    
    # Maximum request body size (20MB)
    # Allows for file uploads up to 20MB (user avatars, property images, etc.)
    client_max_body_size 20M;
    
    # Global error logging
    # Logs server-level errors for debugging and monitoring
    error_log /var/log/nginx/error.log error;

    # ======================================================================
    # GLOBAL PROXY HEADERS - Applied to All Proxied Requests
    # ======================================================================
    
    # Forward original host header to backend services
    # Allows Django to generate correct URLs and handle multiple domains
    proxy_set_header Host $host;
    
    # Forward real client IP address
    # Critical for Django's IP-based features (rate limiting, analytics, etc.)
    proxy_set_header X-Real-IP $remote_addr;
    
    # Forward complete client IP chain (handles multiple proxies)
    # Essential for proper client identification through CDNs/load balancers
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    
    # Forward original protocol (http/https)
    # Allows Django to detect if original request was secure
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Use HTTP/1.1 for backend connections
    # Required for WebSocket upgrades and keep-alive connections
    proxy_http_version 1.1;
    
    # Forward WebSocket upgrade headers
    # Enables WebSocket connections to pass through the proxy
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    # ======================================================================
    # API VERSION 1 ENDPOINT - Specific API Versioning
    # ======================================================================
    
    # Handle versioned API requests (/api/v1/*)
    # Specific location for API version 1 with dedicated logging
    location /api/v1 {
        # Preserve the full request URI so upstream sees /api/v1/paths
        # Django's URL patterns expect the full path including /api/v1/
        proxy_pass http://api;
        
        # Dedicated access logging for API v1 requests
        # Useful for API usage analytics and performance monitoring
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log error;
    }

    # ======================================================================
    # GENERAL API ENDPOINT - All API Requests with CORS Support
    # ======================================================================
    
    # Handle all other API requests (/api/*)
    # Includes API schema, documentation, and future API versions
    location /api/ {
        # Preserve full request URI so Django receives /api/... paths
        # Critical for Django REST Framework routing to work correctly
        proxy_pass http://api;
        
        # API-specific logging for monitoring and debugging
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log error;
        
        # ======================================================================
        # CORS HEADERS - Cross-Origin Resource Sharing
        # ======================================================================
        # Allow cross-origin requests for API access from different domains
        # Essential for frontend applications hosted on different origins
        
        # Allow requests from any origin (use specific domains in production)
        add_header Access-Control-Allow-Origin "*" always;
        
        # Allow specific HTTP methods for API access
        add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
        
        # Allow specific headers that clients can send
        # Authorization: for JWT tokens, API keys
        # Content-Type: for JSON request bodies
        add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;
        
        # Handle CORS preflight requests (OPTIONS method)
        # Browsers send OPTIONS requests before actual requests to check permissions
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type "text/plain charset=UTF-8";
            return 204;
        }
    }

    # ======================================================================
    # API SCHEMA ENDPOINTS - OpenAPI/Swagger Documentation Access
    # ======================================================================
    
    # Exact match for API schema with trailing slash
    # Handles DRF-spectacular schema endpoint with specific CORS settings
    location = /api/schema/ {
        proxy_pass http://api;
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log error;
        
        # CORS headers for schema access from documentation tools
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;
    }

    # Exact match for API schema without trailing slash
    # Handles alternative schema endpoint URL format
    location = /api/schema {
        proxy_pass http://api;
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log error;
    }

    # ======================================================================
    # ADMIN INTERFACE - Django Admin Panel
    # ======================================================================
    
    # Django admin interface (obfuscated URL for security)
    # Using '/supersecret' instead of '/admin' to prevent automated attacks
    location /supersecret {
        # Keep the original request path so Django receives /supersecret/... correctly
        proxy_pass http://api;
        
        # Dedicated admin access logging for security monitoring
        access_log /var/log/nginx/admin_access.log;    
    }
    
    # ======================================================================
    # FRONTEND APPLICATION - Next.js Client Routing
    # ======================================================================
    
    # Default location - route all other requests to Next.js frontend
    # This handles all frontend routes, pages, and assets
    location / {
        proxy_pass http://client;
        
        # WebSocket support for Next.js development features
        # Enables hot reload, fast refresh, and development tools
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # ======================================================================
    # API DOCUMENTATION ENDPOINTS - Interactive API Docs
    # ======================================================================
    
    # ReDoc API documentation interface
    # Provides alternative API documentation UI to Swagger
    location /redoc{
        # ReDoc page is served by the Django API; preserve request URI
        proxy_pass http://api;
    }

    # Swagger UI API documentation interface
    # Interactive API documentation served by DRF-spectacular
    location /swagger {
        proxy_pass http://api;
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log error;
        
        # CORS support for Swagger UI to access API schema
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;
    }

    # ======================================================================
    # STATIC FILES - Optimized File Serving
    # ======================================================================
    
    # Serve Django static files directly through nginx
    # Much faster than serving through Django application
    location /static {
        # Point to the Django staticfiles directory
        # This directory is populated by 'python manage.py collectstatic'
        alias /app/staticfiles;
        
        # Cache static files for 30 days
        # Improves performance by reducing server requests
        expires 30d;
        
        # Add cache control headers for browser caching
        # max-age=2592000 = 30 days in seconds
        add_header Cache-Control "public, max-age=2592000";
    }
}
